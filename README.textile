h1. Clutch

Clutch is a "Clojure":http://clojure.org library for "Apache CouchDB":http://couchdb.apache.org/. Although it's in an early stage of development (Clutch API subject to change), Clutch supports most of the basic Apache CouchDB APIs. To get a sense of where we are at with Clutch, please view "the tests.":http://github.com/ashafa/clutch/blob/master/test/test_clutch.clj 

h3. Usage

<pre>
  (ns #^{:author "Tunde Ashafa"}
      clutch-example
      (:use com.ashafa.clutch))

  (def example-database
    (get-database {:name     "clutch_test_db"
                   :language "clojure"}))     ; use Clutch (Clojure) view server

  (with-db example-database
           ;; insert or update multiple documents
           (bulk-update [{:test-grade 10}
                         {:test-grade 20}
                         {:test-grade 30}])
           ;; create temporary (or permanent) views using clojure 
           (ad-hoc-view
             (view-server-fns :clojure
                {:map    (fn [doc] [[nil (:test-grade doc)]])
                 :reduce (fn [keys values _] (apply + values))}))) ; => 60
</pre>

h3. Download and Installation

To include Clutch in your project, simply add the following to your @project.clj@:

<pre>(:dependencies [com.ashafa/clutch "0.3.0-SNAPSHOT"])</pre>

and run...

<pre>lein deps</pre>

Or, if you're using Maven, add this dependency to your @pom.xml@:

<pre>
  <dependency>
      <groupId>com.ashafa</groupId>
      <artifactId>clutch</artifactId>
      <version>0.3.0-SNAPSHOT</version>
  </dependency>
</pre>

h3. Configuring your CouchDB installation to use the Clutch view server

CouchDB needs to know how to exec Clutch's view server.  Getting this command string together can be tricky, especially given potential classpath complexity.  You can either (a) produce an uberjar of your project, in which case the exec string will be something like:

<pre>java -cp <path to your uberjar> clojure.main -m com.ashafa.clutch.view-server</pre>

or, (b) you can use the @com.ashafa.clutch.utils/view-server-exec-string@ function to dump a likely-to-work exec string.  For example:

<pre>
user=> (use '[com.ashafa.clutch.view-server :only (view-server-exec-string)])
nil
user=> (println (view-server-exec-string))
java -cp "clutch/src:clutch/test:clutch/classes:clutch/resources:clutch/lib/clojure-1.3.0-beta1.jar:clutch/lib/clojure-contrib-1.2.0.jar:clutch/lib/data.json-0.1.1.jar:clutch/lib/tools.logging-0.1.2.jar" clojure.main -m com.ashafa.clutch.view-server
</pre>

This function assumes that @java@ is on CouchDB's PATH, and it's entirely possible that the classpath might not be quite right (esp. on Windows — the above only tested on OS X and Linux so far).  In any case, you can test whether the view server exec string is working properly by trying it yourself and attempting to get it to echo back a log message:

<pre>
[catapult:~/dev/clutch] chas% java -cp "clutch/src:clutch/test:clutch/classes:clutch/resources:clutch/lib/clojure-1.3.0-beta1.jar:clutch/lib/clojure-contrib-1.2.0.jar:clutch/lib/data.json-0.1.1.jar:clutch/lib/tools.logging-0.1.2.jar" clojure.main -m com.ashafa.clutch.view-server
["log" "echo, please"]
["log",["echo, please"]]
</pre>

Enter the first JSON array, and hit return; the view server should immediately reply with the second JSON array.  Anything else, and your exec string is flawed, or something else is wrong.

Once you have a working exec string, you can use Clojure for views and filters by adding a view server configuration to CouchDB.  This can be as easy as passing the exec string to the @com.ashafa.clutch/configure-view-server@ function:

<pre>
(configure-view-server (view-server-exec-string))
</pre>

Alternatively, use Futon to add the @clojure@ query server language to your CouchDB instance's config.

In the end, both of these methods add the exec string you provide it to the 'local.ini' file of your CouchDB installation, which you can modify directly if you like (this is likely what you'll need to do for non-local/production CouchDB instances):

<pre>
  [query_servers]
  clojure = java -cp …rest of your exec string…
</pre>

h3. (Partial) Changelog

h5. 0.3.0-SNAPSHOT

Many breaking changes to refine/simplify the API, clean up the implementation, and add additional features:

Core API:

* Renamed @create-document@ => @put-document@; @put-document@ now supports both creation and update of a document depending upon whether  @:_id@ and @:_rev@ slots are present in the document you are saving.
* @update-document@ semantics have been simplified for the case where an "update function" and arguments are supplied to work well with core Clojure functions like @update-in@ and @assoc@ (fixes issue #8) — e.g. can be used like @swap!@ et al.
* Optional `:id` and `:attachment` arguments to @put-document@ (was @create-document@) are now specified via keyword arguments
* Removed "update map" argument from @bulk-update@ fn (replace with e.g. @(bulk-update db (map #(merge % update-map) documents)@)
* Renamed @get-all-documents-meta@ => @all-documents@

View-related API:

* elimination of inconsistency between APIs between @save-view@ and @save-filter@.  The names of individual views and filters are now part of the map provided to these functions, instead of sometimes being provided separately.
* @:language@ has been eliminated as part of the dynamically-bound configuration map
* @with-clj-view-server@ has been replaced by the more generic @view-server-fns@ macro, which takes a @:language@ keyword or map of options that includes a @:language@ slot (e.g. @:clojure@, @:javascript@, etc), and a map of view/filter/validator names => functions.
* A @view-transformer@ multimethod is now available, which opens up clutch to dynamically support additional view server languages. 
* Moved @view-server-exec-string@ to @com.ashafa.clutch.view-server@ namespace

h3. Contributors

Appreciations go out to:

* "Chas Emerick":http://github.com/cemerick
* "Pierre Larochelle":http://github.com/pierrel
* "Matt Wilson":http://github.com/mattdw
* "Patrick Sullivan":http://github.com/WizardofWestmarch
* "Toni Batchelli":http://tbatchelli.org
* "Hugo Duncan":http://github.com/hugoduncan
* "Ryan Senior":http://github.com/senior